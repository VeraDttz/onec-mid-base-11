
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	//НачалоДоработки
	//++ Мазина ВВ задачаНетологии 11/3 от 02.04.2025
	//Пересчитать сумму строки документа с учетом двух скидок  
	
	//Исходный код:
	//КоэффициентСкидки = 1 - ТекущиеДанные.Скидка / 100;
	//ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество * КоэффициентСкидки; 
		
	СкидкаИтого =  ТекущиеДанные.Скидка + Объект.КЛ_СогласованнаяСкидка;
	
	Если СкидкаИтого > 100 Тогда
		СкидкаИтого = 100; 
		
		ШаблонСтроки = "По позиции %1 скидка больше 100%";
		ПараметрыСтроки = Новый Массив;
		ПараметрыСтроки.Добавить(ТекущиеДанные.Номенклатура); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ШаблонСтроки, ПараметрыСтроки);     
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения; 
		Сообщение.УстановитьДанные(ЭтотОбъект); 
		
		ВидТекущейНоменклатуры = КЛ_ОпределитьВидНоменклатуры(ТекущиеДанные.Номенклатура);
		
		Если ВидТекущейНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар") Тогда
			Сообщение.Поле = "Объект.Товары["+(ТекущиеДанные.НомерСтроки-1)+"].Скидка";
		Иначе
			Сообщение.Поле = "Объект.Услуги["+(ТекущиеДанные.НомерСтроки-1)+"].Скидка";
		КонецЕсли;
		
		Сообщение.Сообщить();
		
	КонецЕсли;

	СуммаСтроки = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	ТекущиеДанные.Сумма = СуммаСтроки - (СуммаСтроки * (СкидкаИтого/100)); 	
	//КонецДоработки
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()

	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура КЛ_КомандаПрименитьСкидку(Команда) Экспорт
	
	//НачалоДоработки
	//++ Мазина В.В. ЗадачаНетологии 11_2 от 01.04.2025
	//Пересчитать сумму всего документа с учетом скидки 
	
    КЛ_ПересчитатьТабличныеЧасти();	
	
	//КонецДоработки  
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура КЛ_СпроситьПользователя()
	
	//НачалоДоработки
	//++ Мазина В.В. ЗадачаНетологии 11_2 от 01.04.2025
	//Пересчет всех строк документа с учетом скидки 
	
	Режим = РежимДиалогаВопрос.ДаНет;   
	Ответ = Ждать ВопросАсинх("Пересчитать табличную часть?", Режим, 0, КодВозвратаДиалога.Да); 
	Если Ответ = КодВозвратаДиалога.Да Тогда		
		КЛ_ПересчитатьТабличныеЧасти(); 	
	КонецЕсли;
	
	//КонецДоработки
			
КонецПроцедуры 

&НаКлиенте
Процедура КЛ_ПересчитатьТабличныеЧасти()
	
	//НачалоДоработки
	//++ Мазина В.В. ЗадачаНетологии 11_2 от 01.04.2025
	//Пересчет всех строк документа с учетом скидки 
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		РассчитатьСуммуСтроки(СтрокаТЧ);
	КонецЦикла;  
	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		РассчитатьСуммуСтроки(СтрокаТЧ);
	КонецЦикла;  
	
	РассчитатьСуммуДокумента();	
	//КонецДоработки
	
КонецПроцедуры    
	
&НаКлиенте
Процедура КЛ_СогласованнаяСкидкаПриИзменении(Элемент) Экспорт 
	
	//НачалоДоработки
	//++ Мазина В.В. ЗадачаНетологии 11_2 от 01.04.2025
	//Спросить пользователя о необходимости пересчета при изменении скидки
	
	ТекДанныеТовары = Элементы.Товары.ТекущиеДанные;
	ТекДанныеУслуги = Элементы.Услуги.ТекущиеДанные;  
	
	Если ТекДанныеТовары = Неопределено И ТекДанныеУслуги = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КЛ_СпроситьПользователя();
	
	//КонецДоработки
	
КонецПроцедуры 

&НаСервере
Функция КЛ_ОпределитьВидНоменклатуры(ТекущиеДанные) 
	
	//НачалоДоработки
	//++ Мазина В.В. ЗадачаНетологии 11_2 от 03.04.2025
	//Получить вид текущей номенклатуры
	
	Возврат ТекущиеДанные.ВидНоменклатуры; 
	
	//КонецДоработки
	
КонецФункции


#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

